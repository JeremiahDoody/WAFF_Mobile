<#@ template hostSpecific="true" debug="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var manager = Manager.Create(Host, GenerationEnvironment);

	var settingsFileName = Path.GetFileName(Host.TemplateFile) + ".settings.xml";
	var templateFolder = Path.GetDirectoryName(Host.TemplateFile);
	settingsFileName = Path.Combine(templateFolder, settingsFileName);

	var serializer = new XmlSerializer(typeof(AndroidDesignerGenerator));
	StreamReader reader = new StreamReader(settingsFileName);
	var settings = (AndroidDesignerGenerator)serializer.Deserialize(reader);
	reader.Close();
	
	var visualStudio = ( this.Host as IServiceProvider )
        .GetService( typeof( EnvDTE.DTE ) ) as EnvDTE.DTE;
    var project = visualStudio.Solution
        .FindProjectItem( this.Host.TemplateFile )
        .ContainingProject as EnvDTE.Project;
	var projectDefaultNamespace = project.Properties.Item("DefaultNamespace")
		.Value.ToString();

	var defaultNamespace = settings.DefaultDesignerNamespace;
	if (string.IsNullOrEmpty(defaultNamespace)) {
		defaultNamespace = projectDefaultNamespace;
	}

	manager.StartHeader();
#>// Code generated by a template
using System;
using Android.Widget;
using Android.Views;
using <#=projectDefaultNamespace#>.Extensions;
<#
	manager.EndBlock();

	var localPath = this.Host.ResolvePath("Resources\\Layout");
	var dirInfo = new DirectoryInfo(localPath);
	var fileInfos = dirInfo.GetFiles("*.axml");
	foreach (var fileInfo in fileInfos)
    {
		var viewEntries = ParseFile(fileInfo.FullName);
		var className = Path.GetFileNameWithoutExtension(fileInfo.Name);
		var nameSpace = defaultNamespace;
		var matchFound = false;
		foreach (var configFileEntry in settings.Axmls) 
		{
			var match = Regex.Match(fileInfo.Name, configFileEntry.Value);
            if (match.Success)
            {
				if (!string.IsNullOrEmpty(configFileEntry.Namespace)) 
				{
					nameSpace = configFileEntry.Namespace;
				}
				if (!string.IsNullOrEmpty(configFileEntry.ClassName)) 
				{
					className = configFileEntry.ClassName;
				}

                for (int i = 0; i < match.Groups.Count; i++)
                {
					var group = match.Groups[i];
					nameSpace = nameSpace.Replace("$" + i, group.Value);
					className = className.Replace("$" + i, group.Value);
                }
				matchFound = true;
				break;
            }
		}
		if (!matchFound) 
		{
			continue;
		}
		manager.StartNewFile(className + ".designer.cs");

#>namespace <#=nameSpace#> {
	partial class <#=className#> {
<#
		foreach (var viewEntry in viewEntries) {
			var privateVariableName = viewEntry.Name;
			privateVariableName = Char.ToLowerInvariant(privateVariableName[0]) + privateVariableName.Substring(1);
#>
		private <#=viewEntry.Type#> _<#=privateVariableName#>;
		public <#=viewEntry.Type#> <#=viewEntry.Name#> { get { return _<#=privateVariableName#> ?? (_<#=privateVariableName#> =  <#=viewEntry.ParentView#>.FindViewById<<#=viewEntry.Type#>>(Resource.<#=viewEntry.ResourceId#>)); } }
<#
		}
#>	}
}
<#
		manager.EndBlock();
	}
	manager.Process(true);
	#>
using Android.App;
namespace <#=projectDefaultNamespace#>.Extensions {
	public static class AndroidDesignerExtensions {
		public static T FindViewById<T>(this Fragment fragment, int id) 
			where T : View
		{
			return fragment.View.FindViewById<T>(id);
		}
	}
}	
<#+ 
public class ViewEntryInfo {
	public string Type {get;set;}
	public string Name {get;set;}
	public string ResourceId {get;set;}
	public string ParentView {get;set;}
}
public List<ViewEntryInfo> ParseFile(string filename) {
	var result = new List<ViewEntryInfo>();

	var axml = XDocument.Load(filename);
	var nameTable = axml.CreateReader().NameTable;

    var namespaceManager = new XmlNamespaceManager(nameTable);
    namespaceManager.AddNamespace("android", "http://schemas.android.com/apk/res/android");

    var elements = axml.XPathSelectElements("//*[@android:id]", namespaceManager);

	var foundIds = new List<string>();
    foreach (var xElement in elements)
    {
        var id = xElement.Attribute(XName.Get("id", "http://schemas.android.com/apk/res/android")).Value;
		var type = xElement.Name.ToString();
		string resourceId = "";
		string variableName;
        if (id.StartsWith("@+id/")) {
			resourceId = "Id."+id.Replace("@+id/", "");
			variableName = id.Replace("@+id/", "");
		} else {
			resourceId = id.Replace("@+", "").Replace("/",".");
			variableName = id.Substring(id.IndexOf('/') + 1);
		}
		if (foundIds.Contains(variableName)) {
			continue;
		}
		foundIds.Add(variableName);
            
		
		if (type == "include") {
			type = "View";
			var layout = xElement.Attribute("layout").Value;
			var layoutFileName = layout.Replace("@layout/", "") + ".axml";
			var layoutPath = Path.Combine(Path.GetDirectoryName(filename), layoutFileName);
			var subViews = ParseFile(layoutPath);
			foreach (var subView in subViews) {
				result.Add(new ViewEntryInfo() {
					Type = subView.Type,
					Name = variableName + "_" + subView.Name,
					ResourceId = subView.ResourceId,
					ParentView = variableName,
				});
			}
		} else if (type == "merge") {
			var layout = xElement.Attribute("layout").Value;
			var layoutFileName = layout.Replace("@layout/", "") + ".axml";
			var layoutPath = Path.Combine(Path.GetDirectoryName(filename), layoutFileName);
			var subViews = ParseFile(layoutPath);
			foreach (var subView in subViews) {
				result.Add(new ViewEntryInfo() {
					Type = subView.Type,
					Name = subView.Name,
					ResourceId = subView.ResourceId,
					ParentView = "this",
				});
			}
			continue;
		}
		
		result.Add(new ViewEntryInfo() {
			Type = type,
			Name = variableName,
			ResourceId = resourceId,
			ParentView = "this",
		});
    }

	return result;
}

[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
public partial class AndroidDesignerGenerator
{

    private string defaultDesignerNamespaceField;

    private AndroidDesignerGeneratorAxml[] axmlsField;

    /// <remarks/>
    public string DefaultDesignerNamespace
    {
        get
        {
            return this.defaultDesignerNamespaceField;
        }
        set
        {
            this.defaultDesignerNamespaceField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Axml", IsNullable = false)]
    public AndroidDesignerGeneratorAxml[] Axmls
    {
        get
        {
            return this.axmlsField;
        }
        set
        {
            this.axmlsField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class AndroidDesignerGeneratorAxml
{

    private string namespaceField;

    private string valueField;

	private string classnameField;

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string Namespace
    {
        get
        {
            return this.namespaceField;
        }
        set
        {
            this.namespaceField = value;
        }
    }
	
	/// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string ClassName
    {
        get
        {
            return this.classnameField;
        }
        set
        {
            this.classnameField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }
}

/*
    Manager.tt from Damien Guard: http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited
*/


// Manager class records the various blocks so it can split them up
class Manager
{
    private class Block
    {
        public String Name;
        public int Start, Length;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template)
    {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public virtual bool FileOkToWrite(String fileName)
    {
        return true;
    }

    public void KeepGeneratedFile(String name)
    {
        name = Path.Combine(Path.GetDirectoryName(host.TemplateFile), name);
        generatedFileNames.Add(name);
    }
    
    public void StartNewFile(String name)
    {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter()
    {
        CurrentBlock = footer;
    }

    public void StartHeader()
    {
        CurrentBlock = header;
    }

    public void EndBlock()
    {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split)
    {
        if (split)
        {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach (Block block in files)
            {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content)
    {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName)
    {
        return null;
    }

    public virtual String DefaultProjectNamespace
    {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent)
    {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template)
    {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock
    {
        get { return currentBlock; }
        set
        {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager : Manager
    {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;
        private IVsQueryEditQuerySave2 queryEditSave;

        public override String DefaultProjectNamespace
        {
            get
            {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName)
        {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split)
        {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        public override bool FileOkToWrite(String fileName)
        {
            CheckoutFileIfRequired(fileName);
            return base.FileOkToWrite(fileName);
        }

        protected override void CreateFile(String fileName, String content)
        {
            if (IsFileContentDifferent(fileName, content))
            {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template)
        {
            var hostServiceProvider = (IServiceProvider)host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
            queryEditSave = (IVsQueryEditQuerySave2)hostServiceProvider.GetService(typeof(SVsQueryEditQuerySave));
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames)
        {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach (var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach (String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName)
        {
            if (queryEditSave != null)
            {
                uint pfEditVerdict;
                queryEditSave.QuerySaveFile(fileName, 0, null, out pfEditVerdict);
            }
            else
            {
                var sc = dte.SourceControl;
                if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName)) 
                    checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
            }
        }
    }
}

/*
    End of Manager.tt
*/
#>